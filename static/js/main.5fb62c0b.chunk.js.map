{"version":3,"sources":["components/BigSlider.js","clockFace.svg","hourHand.svg","clockMask.svg","utils.js","components/DigiLogClock.js","components/ZoomClock.js","components/FreestyleClock.js","components/WallClock.js","App.js","reportWebVitals.js","index.js"],"names":["BigSlider","withStyles","root","color","height","thumb","width","backgroundColor","border","marginTop","marginLeft","boxShadow","active","valueLabel","left","track","borderRadius","rail","Slider","getAlpha","z","viewportRadius","Math","atan","getCenterOffset","sin","getDilation","cos","getHalfChord","DigiLog","t","radians","size","zoom","hour","minute","time","PI","calcTimeRadians","radius","scaleFactor","utils","dx","dy","style","position","overflow","id","className","transform","transition","src","clockFace","alt","hourHand","toFixed","clockMask","DigiLogZoom","maxZoom","useState","setZoom","Grid","container","spacing","item","onClick","max","xs","value","onChange","_","newZoom","aria-labelledby","min","FreestyleClock","totalMinutes","setTotalMinutes","floor","now","DateTime","newTime","WallClock","timeZone","setZone","setTime","useInterval","App","display","flex","justifyContent","alignItems","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5fb62c0b.chunk.js","sourcesContent":["import { withStyles } from '@material-ui/core/styles'\r\nimport Slider from '@material-ui/core/Slider'\r\n\r\nexport const BigSlider = withStyles({\r\n    root: {\r\n        color: '#000000',\r\n        height: 8,\r\n    },\r\n    thumb: {\r\n        height: 24,\r\n        width: 24,\r\n        backgroundColor: '#fff',\r\n        border: '2px solid currentColor',\r\n        marginTop: -8,\r\n        marginLeft: -12,\r\n        '&:focus, &:hover, &$active': {\r\n            boxShadow: 'inherit',\r\n        },\r\n    },\r\n    active: {},\r\n    valueLabel: {\r\n        left: 'calc(-50% + 4px)',\r\n    },\r\n    track: {\r\n        height: 8,\r\n        borderRadius: 4,\r\n    },\r\n    rail: {\r\n        height: 8,\r\n        borderRadius: 4,\r\n    },\r\n})(Slider)\r\n","export default __webpack_public_path__ + \"static/media/clockFace.e31f0d3d.svg\";","export default __webpack_public_path__ + \"static/media/hourHand.d2e72bb6.svg\";","export default __webpack_public_path__ + \"static/media/clockMask.8e0a614b.svg\";","\r\n// alpha is angle between diameter and zoom projection line\r\nexport const getAlpha = (z, viewportRadius) =>\r\n    Math.atan(z/viewportRadius);\r\n\r\n// center offset is distance between viewport center and clock face center\r\nexport const getCenterOffset = (z, viewportRadius) =>\r\n    Math.sin(getAlpha(z, viewportRadius)) * viewportRadius;\r\n\r\n// half length of clock face chord placed on viewport diameter\r\nexport const getHalfChord = (z, viewportRadius) =>\r\n    Math.cos(getAlpha(z, viewportRadius)) * viewportRadius;\r\n\r\n// delta x is offset in x direction \r\nexport const getDeltaX = (t, z, viewportRadius) =>\r\n    Math.cos(t) * getCenterOffset(z, viewportRadius);\r\n\r\n// delta y is offset in y direction\r\nexport const getDeltaY = (t, z, viewportRadius) =>\r\n    Math.sin(t) * getCenterOffset(z, viewportRadius);\r\n\r\n// dilation is scaling multiplier\r\nexport const getDilation = (z, viewportRadius) => \r\n    viewportRadius/getHalfChord(z, viewportRadius);\r\n\r\nexport const deg2rad = (degrees) =>\r\n    degrees * Math.PI / 180;\r\n\r\nexport const rad2deg = (radians) =>\r\n    radians * 180 / Math.PI","import clockFace from '../clockFace.svg'\r\nimport hourHand from '../hourHand.svg'\r\nimport clockMask from '../clockMask.svg'\r\nimport * as utils from '../utils'\r\n\r\nfunction calcTimeRadians(hour, minute) {\r\n    // let pole lay on positive y-axis to start angle calculation\r\n    let time = Math.PI / 2\r\n    // advance hour\r\n    time = time - (hour * Math.PI / 6)\r\n    // advance minute\r\n    time = time - (minute * Math.PI / 360)\r\n\r\n    return time\r\n}\r\n\r\n// DigiLog = Digital + Analog\r\nexport const DigiLog = ({ size = 200, zoom = 0, hour = 0, minute = 0 }) => {\r\n\r\n    const time = calcTimeRadians(hour, minute)\r\n\r\n    const radius = size / 2\r\n\r\n    // adjustments\r\n    // use zoom to dilate svg\r\n    const scaleFactor = utils.getDilation(zoom, radius)\r\n\r\n    // use time and zoom to translate face\r\n    const dx = utils.getDeltaX(time, zoom, radius) * utils.getDilation(zoom, radius)\r\n    const dy = utils.getDeltaY(time, zoom, radius) * utils.getDilation(zoom, radius)\r\n\r\n    return (\r\n        <div style={{ position: 'relative', width: `${size}px`, height: `${size}px`, overflow: 'hidden', borderRadius: \"50%\", 'WebkitMaskImage': 'WebkitRadialGradient(white, black);' }}>\r\n            <div id=\"clockFaceContainer\" className=\"floatCenter\" style={{\r\n                width: `${size}px`,\r\n                height: `${size}px`,\r\n                transform: `translate(${-dx}px, ${dy}px)`,\r\n                transition: 'all 0.5s linear',\r\n            }}>\r\n                {/* img will float in center of container for scaling on the center point */}\r\n                <img\r\n                    id=\"clockFace\"\r\n                    src={clockFace}\r\n                    alt=\"clock face\"\r\n                    style={{\r\n                        width: `${size}px`,\r\n                        height: `${size}px`,\r\n                        transform: `scale(${scaleFactor})`,\r\n                        transition: 'all 0.5s linear',\r\n                    }}\r\n                />\r\n            </div>\r\n\r\n            <div id=\"hourHandContainer\" className=\"floatCenter\" style={{\r\n                width: `${size}px`,\r\n                height: `${size}px`,\r\n                transform: `translate(${-dx}px, ${dy}px)`,\r\n                transition: 'all 0.5s linear',\r\n            }}>\r\n                {/* img will float in center of container for scaling on the center point */}\r\n                <img\r\n                    id=\"hourHand\"\r\n                    src={hourHand}\r\n                    alt=\"hour hand\"\r\n                    style={{\r\n                        width: `${size}px`,\r\n                        height: `${size}px`,\r\n                        transform: `scale(${scaleFactor}) rotate(${90 - utils.rad2deg(time).toFixed(1)}deg)`,\r\n                        transition: 'all 0.5s linear',\r\n                    }}\r\n                />\r\n            </div>\r\n            <div className=\"floatCenter\" style={{\r\n                width: `${size}px`,\r\n                height: `${size}px`,\r\n            }}>\r\n                <img\r\n                    id=\"mask\"\r\n                    src={clockMask}\r\n                    alt=\"mask\"\r\n                    style={{\r\n                        width: `${size * 3}px`,\r\n                        height: `${size * 3}px`,\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { useState } from \"react\"\r\nimport { DigiLog } from \"./DigiLogClock\"\r\nimport Grid from '@material-ui/core/Grid'\r\nimport ZoomOutIcon from '@material-ui/icons/ZoomOut'\r\nimport ZoomInIcon from '@material-ui/icons/ZoomIn'\r\nimport { BigSlider } from \"./BigSlider\"\r\n\r\nexport const DigiLogZoom = ({ size = 200, hour, minute, maxZoom = 150 }) => {\r\n    const [zoom, setZoom] = useState(0)\r\n\r\n    return (\r\n        <div style={{ width: size }}>\r\n            <DigiLog size={size} zoom={zoom} hour={hour} minute={minute} />\r\n            <Grid container spacing={2}>\r\n                <Grid item>\r\n                    <ZoomOutIcon onClick={() => setZoom((z) => Math.max(0, z - 10))} />\r\n                </Grid>\r\n                <Grid item xs>\r\n                    <BigSlider\r\n                        value={zoom}\r\n                        onChange={(_, newZoom) => setZoom(newZoom)}\r\n                        max={maxZoom}\r\n                        aria-labelledby=\"continuous-zoom-slider\"\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <ZoomInIcon onClick={() => setZoom((z) => Math.min(maxZoom, z + 10))} />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n","import { useState } from \"react\"\r\nimport { BigSlider } from \"./BigSlider\"\r\nimport { DigiLogZoom } from \"./ZoomClock\"\r\nimport Grid from '@material-ui/core/Grid'\r\nimport SpeedIcon from '@material-ui/icons/Speed'\r\nimport { DateTime } from \"luxon\"\r\n\r\nexport const FreestyleClock = ({ size = 200, maxZoom = 150 }) => {\r\n    const [totalMinutes, setTotalMinutes] = useState(0)\r\n\r\n    return (\r\n        <div style={{ width: size }}>\r\n            <DigiLogZoom size={size} maxZoom={maxZoom} hour={Math.floor(totalMinutes / 60)} minute={totalMinutes % 60} />\r\n            <Grid container spacing={2}>\r\n                <Grid item>\r\n                    <SpeedIcon onClick={() => {\r\n                        const now = DateTime.now()\r\n                        setTotalMinutes((now.hour * 60 + now.minute) % (60 * 12))\r\n                    }} />\r\n                </Grid>\r\n                <Grid item xs>\r\n                    <BigSlider\r\n                        value={totalMinutes}\r\n                        onChange={(_, newTime) => setTotalMinutes(newTime)}\r\n                        max={60 * 12}\r\n                        aria-labelledby=\"continuous-time-slider\"\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n","import { useState } from \"react\"\r\nimport { DigiLogZoom } from \"./ZoomClock\"\r\nimport { useInterval } from 'react-use'\r\nimport { DateTime } from \"luxon\"\r\n\r\nexport const WallClock = ({ size = 200, timeZone = 'local' }) => {\r\n    const [time, setTime] = useState(DateTime.now().setZone(timeZone))\r\n\r\n    useInterval(() => {\r\n        setTime(DateTime.now().setZone(timeZone))\r\n    }, 1000)\r\n\r\n    return (<DigiLogZoom size={size} hour={time.hour} minute={time.minute} />)\r\n}\r\n","import './App.css'\r\nimport { FreestyleClock } from './components/FreestyleClock'\r\nimport { WallClock } from './components/WallClock'\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div style={{ display: 'flex' }}>\r\n            <div style={{ flex: 1, display: \"flex\", justifyContent: 'center', alignItems: 'center' }}>\r\n                <WallClock style={{ flex: 1 }} />\r\n            </div>\r\n            <div style={{ flex: 1, display: \"flex\", justifyContent: 'center', alignItems: 'center' }}>\r\n                <FreestyleClock style={{ flex: 1 }} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}