{"version":3,"sources":["components/BigSlider.js","clockFace.svg","hourHand.svg","clockMask.svg","utils.js","components/DigiLogClock.js","components/ZoomClock.js","components/FreestyleClock.js","components/WallClock.js","App.js","reportWebVitals.js","index.js"],"names":["BigSlider","withStyles","root","color","height","thumb","width","backgroundColor","border","marginTop","marginLeft","boxShadow","active","valueLabel","left","track","borderRadius","rail","Slider","ZOOM_RESOLUTION","k","alphaRightBound","Math","PI","resolution","getK","DigiLog","n","min","max","radians","size","zoom","hour","minute","radius","time","calcTimeRadians","alpha","utils","scaleFactor","sin","dx","R","tau","cos","dy","style","position","overflow","zIndex","id","className","transform","transition","src","clockFace","alt","draggable","onDragStart","userSelect","pointerEvents","hourHand","toFixed","clockMask","DigiLogZoom","useState","setZoom","Grid","container","spacing","item","onClick","z","xs","value","onChange","_","newZoom","aria-labelledby","FreestyleClock","totalMinutes","setTotalMinutes","floor","now","DateTime","newTime","WallClock","timeZone","setZone","setTime","useInterval","App","display","flex","justifyContent","alignItems","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5dd7d64a.chunk.js","sourcesContent":["import { withStyles } from '@material-ui/core/styles'\r\nimport Slider from '@material-ui/core/Slider'\r\n\r\nexport const BigSlider = withStyles({\r\n    root: {\r\n        color: '#000000',\r\n        height: 8,\r\n    },\r\n    thumb: {\r\n        height: 24,\r\n        width: 24,\r\n        backgroundColor: '#fff',\r\n        border: '2px solid currentColor',\r\n        marginTop: -8,\r\n        marginLeft: -12,\r\n        '&:focus, &:hover, &$active': {\r\n            boxShadow: 'inherit',\r\n        },\r\n    },\r\n    active: {},\r\n    valueLabel: {\r\n        left: 'calc(-50% + 4px)',\r\n    },\r\n    track: {\r\n        height: 8,\r\n        borderRadius: 4,\r\n    },\r\n    rail: {\r\n        height: 8,\r\n        borderRadius: 4,\r\n    },\r\n})(Slider)\r\n","export default __webpack_public_path__ + \"static/media/clockFace.e31f0d3d.svg\";","export default __webpack_public_path__ + \"static/media/hourHand.d2e72bb6.svg\";","export default __webpack_public_path__ + \"static/media/clockMask.8e0a614b.svg\";","export const ZOOM_RESOLUTION = 100\r\n\r\nconst getK = (alphaRightBound = Math.PI / 6, resolution = ZOOM_RESOLUTION) =>\r\n    (1 / alphaRightBound - 2 / Math.PI) / resolution\r\n\r\nconst k = getK()\r\n\r\n// alpha is half the zoom segment angle\r\nexport const getAlpha = (zoom) =>\r\n    1 / (zoom * k + 2 / Math.PI)\r\n\r\nexport const getScaleFactor = (alpha) =>\r\n    1 / Math.sin(alpha)\r\n\r\n// delta x is offset in x direction \r\nexport const getDeltaX = (R, tau, alpha) =>\r\n    R * Math.cos(tau) * Math.cos(alpha) / Math.sin(alpha)\r\n\r\n// delta y is offset in y direction\r\nexport const getDeltaY = (R, tau, alpha) =>\r\n    R * Math.sin(tau) * Math.cos(alpha) / Math.sin(alpha)\r\n\r\nexport const deg2rad = (degrees) =>\r\n    degrees * Math.PI / 180;\r\n\r\nexport const rad2deg = (radians) =>\r\n    radians * 180 / Math.PI\r\n\r\nexport const clamp = (n, min, max) => Math.min(Math.max(n, min), max)","import clockFace from '../clockFace.svg'\r\nimport hourHand from '../hourHand.svg'\r\nimport clockMask from '../clockMask.svg'\r\nimport * as utils from '../utils'\r\n\r\nfunction calcTimeRadians(hour, minute) {\r\n    // let pole lay on positive y-axis to start angle calculation\r\n    let time = Math.PI / 2\r\n    // advance hour\r\n    time = time - (hour * Math.PI / 6)\r\n    // advance minute\r\n    time = time - (minute * Math.PI / 360)\r\n\r\n    return time\r\n}\r\n\r\n// DigiLog = Digital + Analog\r\nexport const DigiLog = ({ size = 200, zoom = 0, hour = 0, minute = 0 }) => {\r\n    const radius = size / 2\r\n\r\n    const time = calcTimeRadians(hour, minute)\r\n\r\n    const clampedZoom = utils.clamp(zoom, 0, utils.ZOOM_RESOLUTION)\r\n    const alpha = utils.getAlpha(clampedZoom)\r\n\r\n    // adjustments\r\n    // use zoom to dilate svg\r\n    const scaleFactor = utils.getScaleFactor(alpha)\r\n\r\n    // use time and zoom to translate face\r\n    const dx = utils.getDeltaX(radius, time, alpha)\r\n    const dy = utils.getDeltaY(radius, time, alpha)\r\n\r\n    return (\r\n        <div style={{ position: 'relative', width: `${size}px`, height: `${size}px`, overflow: 'hidden', borderRadius: \"50%\", zIndex: 1 }}>\r\n            <div id=\"clockFaceContainer\" className=\"floatCenter\" style={{\r\n                width: `${size}px`,\r\n                height: `${size}px`,\r\n                transform: `translate(${-dx}px, ${dy}px)`,\r\n                transition: 'all 0.5s linear',\r\n            }}>\r\n                {/* img will float in center of container for scaling on the center point */}\r\n                <img\r\n                    id=\"clockFace\"\r\n                    src={clockFace}\r\n                    alt=\"clock face\"\r\n                    draggable={false}\r\n                    onDragStart=\"return false\"\r\n                    style={{\r\n                        width: `${size}px`,\r\n                        height: `${size}px`,\r\n                        transform: `scale(${scaleFactor})`,\r\n                        transition: 'all 0.5s linear',\r\n                        userSelect: 'none',\r\n                        pointerEvents: 'none',\r\n                    }}\r\n                />\r\n            </div>\r\n\r\n            <div id=\"hourHandContainer\" className=\"floatCenter\" style={{\r\n                width: `${size}px`,\r\n                height: `${size}px`,\r\n                transform: `translate(${-dx}px, ${dy}px)`,\r\n                transition: 'all 0.5s linear',\r\n            }}>\r\n                {/* img will float in center of container for scaling on the center point */}\r\n                <img\r\n                    id=\"hourHand\"\r\n                    src={hourHand}\r\n                    alt=\"hour hand\"\r\n                    draggable={false}\r\n                    onDragStart=\"return false\"\r\n                    style={{\r\n                        width: `${size}px`,\r\n                        height: `${size}px`,\r\n                        transform: `scale(${scaleFactor}) rotate(${90 - utils.rad2deg(time).toFixed(1)}deg)`,\r\n                        transition: 'all 0.5s linear',\r\n                        userSelect: 'none',\r\n                        pointerEvents: 'none',\r\n                    }}\r\n                />\r\n            </div>\r\n            <div className=\"floatCenter\" style={{\r\n                width: `${size}px`,\r\n                height: `${size}px`,\r\n                zIndex: 0,\r\n            }}>\r\n                <img\r\n                    id=\"mask\"\r\n                    src={clockMask}\r\n                    alt=\"mask\"\r\n                    draggable={false}\r\n                    onDragStart=\"return false\"\r\n                    style={{\r\n                        width: `${size * 3}px`,\r\n                        height: `${size * 3}px`,\r\n                        userSelect: 'none',\r\n                        pointerEvents: 'none',\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { useState } from \"react\"\r\nimport { DigiLog } from \"./DigiLogClock\"\r\nimport Grid from '@material-ui/core/Grid'\r\nimport ZoomOutIcon from '@material-ui/icons/ZoomOut'\r\nimport ZoomInIcon from '@material-ui/icons/ZoomIn'\r\nimport { BigSlider } from \"./BigSlider\"\r\nimport { ZOOM_RESOLUTION } from \"../utils\"\r\n\r\nexport const DigiLogZoom = ({ size = 200, hour, minute }) => {\r\n    const [zoom, setZoom] = useState(0)\r\n\r\n    return (\r\n        <div style={{ width: size, userSelect: 'none' }}>\r\n            <DigiLog size={size} zoom={zoom} hour={hour} minute={minute} />\r\n            <Grid container spacing={2}>\r\n                <Grid item>\r\n                    <ZoomOutIcon onClick={() => setZoom((z) => Math.max(0, z - 10))} />\r\n                </Grid>\r\n                <Grid item xs>\r\n                    <BigSlider\r\n                        value={zoom}\r\n                        onChange={(_, newZoom) => setZoom(newZoom)}\r\n                        max={ZOOM_RESOLUTION}\r\n                        aria-labelledby=\"continuous-zoom-slider\"\r\n                    />\r\n                </Grid>\r\n                <Grid item>\r\n                    <ZoomInIcon onClick={() => setZoom((z) => Math.min(ZOOM_RESOLUTION, z + 10))} />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n","import { useState } from \"react\"\r\nimport { BigSlider } from \"./BigSlider\"\r\nimport { DigiLogZoom } from \"./ZoomClock\"\r\nimport Grid from '@material-ui/core/Grid'\r\nimport SpeedIcon from '@material-ui/icons/Speed'\r\nimport { DateTime } from \"luxon\"\r\n\r\nexport const FreestyleClock = ({ size = 200 }) => {\r\n    const [totalMinutes, setTotalMinutes] = useState(0)\r\n\r\n    return (\r\n        <div style={{ width: size }}>\r\n            <DigiLogZoom size={size} hour={Math.floor(totalMinutes / 60)} minute={totalMinutes % 60} />\r\n            <Grid container spacing={2}>\r\n                <Grid item>\r\n                    <SpeedIcon onClick={() => {\r\n                        const now = DateTime.now()\r\n                        setTotalMinutes((now.hour * 60 + now.minute) % (60 * 12))\r\n                    }} />\r\n                </Grid>\r\n                <Grid item xs>\r\n                    <BigSlider\r\n                        value={totalMinutes}\r\n                        onChange={(_, newTime) => setTotalMinutes(newTime)}\r\n                        max={60 * 12}\r\n                        aria-labelledby=\"continuous-time-slider\"\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n","import { useState } from \"react\"\r\nimport { DigiLogZoom } from \"./ZoomClock\"\r\nimport { useInterval } from 'react-use'\r\nimport { DateTime } from \"luxon\"\r\n\r\nexport const WallClock = ({ size = 200, timeZone = 'local' }) => {\r\n    const [time, setTime] = useState(DateTime.now().setZone(timeZone))\r\n\r\n    useInterval(() => {\r\n        setTime(DateTime.now().setZone(timeZone))\r\n    }, 1000)\r\n\r\n    return (<DigiLogZoom size={size} hour={time.hour} minute={time.minute} />)\r\n}\r\n","import './App.css'\r\nimport { FreestyleClock } from './components/FreestyleClock'\r\nimport { WallClock } from './components/WallClock'\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div style={{ display: 'flex', userSelect: 'none' }}>\r\n            <div style={{ flex: 1, display: \"flex\", justifyContent: 'center', alignItems: 'center' }}>\r\n                <WallClock style={{ flex: 1 }} />\r\n             </div>\r\n             <div style={{ flex: 1, display: \"flex\", justifyContent: 'center', alignItems: 'center' }}>\r\n                <FreestyleClock style={{ flex: 1 }} />\r\n             </div>\r\n         </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}