<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://fidelcoria.com/blog</id>
    <title>Technical Journal Blog</title>
    <updated>2021-12-16T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://fidelcoria.com/blog"/>
    <subtitle>Technical Journal Blog</subtitle>
    <icon>https://fidelcoria.com/https://emojicdn.elk.sh/ðŸš®</icon>
    <entry>
        <title type="html"><![CDATA[Useless Machine - LEGO Technic]]></title>
        <id>Useless Machine - LEGO Technic</id>
        <link href="https://fidelcoria.com/blog/2021/12/16/Lego_Useless_Machine"/>
        <updated>2021-12-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The purpose of a Useless Machine is to turn itself off when activated. Kits and built examples are available for purchase. While researching I found LEGO models but without kits or instructions.]]></summary>
        <content type="html"><![CDATA[<p>The purpose of a Useless Machine is to turn itself off when activated. Kits and built examples are available for purchase. While researching I found LEGO models but without kits or instructions.</p><p>Challenge accepted!</p><p>I completed the model in March of 2017 and revised it today.</p><p>Without a parts list or instructions I decided to reverse engineer the device from the following video:
<a href="https://www.youtube.com/watch?v=HAk-rhvZe2w">[011] Lego Technic - Useless Machine</a></p><p>I created a model using LEGO Digital Designer (LDD) before buying the parts. <a href="./UselessMachine.lxf">Download the LXF model</a></p><p>Using LDD I generated a PDF with building instructions and a parts list at the end.
<a href="./UselessMachineInstructions.pdf">Download the PDF instructions</a></p><p>Here is the model at the final step of assembly</p><p><img src="./Step84.png" alt="Final Step from instructions"/></p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Custom Apex Domain for GitHub Pages]]></title>
        <id>Custom Apex Domain for GitHub Pages</id>
        <link href="https://fidelcoria.com/blog/2021/12/06/GitHub_Pages"/>
        <updated>2021-12-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I'll explain how I made the DNS records for an apex domain (fidelcoria.com) with a redirect from www.fidelcoria.com to fidelcoria.com.]]></summary>
        <content type="html"><![CDATA[<p>I&#x27;ll explain how I made the DNS records for an apex domain (fidelcoria.com) with a redirect from <a href="http://www.fidelcoria.com">www.fidelcoria.com</a> to fidelcoria.com.</p><p>If you&#x27;re new to GitHub Pages visit <a href="https://pages.github.com/">pages.github.com</a> to learn the basics.</p><h2>TL;DR</h2><p>Here are the DNS records. The host values for the DNS records were the tricky part to figure out. </p><pre><code>ALIAS
Host: @
Target: alzafacon.github.io.
</code></pre><pre><code>CNAME
Host: www
Target: alzafacon.github.io.
</code></pre><h2>The devil is in the details</h2><p>I find the official documentation to be unclear or confusing in some parts, but I don&#x27;t blame them. The internet is complicated and the GitHub writers are trying to make the docs helpful even for beginners.</p><p>The long and short of it is that the steps (for apex domain with https and www) are in the docs <a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain">here</a>. Unfortunately the DNS instructions are confusing.</p><p>Here are the steps I had to follow:</p><ul><li><p>Enter your desired custom domain in the repo settings page (<strong>before</strong> creating any DNS entries)</p><p> I used fidelcoria.com (without the leading <code>www.</code>)</p><p> Doing this will configure a CNAME file on your GitHub Pages branch</p></li><li><p>Create an ALIAS record via your DNS provider</p><p>The docs say &quot;<code>To create an ALIAS or ANAME record, point your apex domain to the default domain for your site</code>&quot;.</p><p>The <code>apex domain</code> did not work. Instead I had to use <code>@</code>, which is used to represent the &quot;bare domain&quot; in DNS records.</p><pre><code>ALIAS
Host: @
Target: alzafacon.github.io.
</code></pre></li><li><p>Create a CNAME record via your DNS provider</p><p>The docs say &quot;<code>Navigate to your DNS provider and create a CNAME record that points www.example.com to the default domain for your site</code>&quot;</p><p><code>www.fidelcoria.com</code> did not work. Instead I had to use <code>www</code>.</p><pre><code>CNAME
Host: www
Target: alzafacon.github.io.
</code></pre></li></ul><p>DNS changes can take up to 24 hours to propagate. This makes it hard to tell if something is wrong or just needs more time.</p><p>I learned the best approach for me was to get informed, decide what I want, make a plan, try it out, observe patiently, then iterate.</p><h2>Extra DNS setup</h2><p>I also setup alzafacon.com to redirect to fidelcoria.com</p><pre><code>URL Redirect
Host: @
Destination URL: https://fidelcoria.com
Unmasked
</code></pre>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DigiLog - The Single Hand Analog Clock with a Digital Enhancement]]></title>
        <id>DigiLog - The Single Hand Analog Clock with a Digital Enhancement</id>
        <link href="https://fidelcoria.com/blog/2021/12/05/DigiLog"/>
        <updated>2021-12-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In the past single hand clocks and watches were common, but they were difficult to read precisely. Minute hands were added to address the precision problem.]]></summary>
        <content type="html"><![CDATA[<p>In the past single hand clocks and watches were common, but they were difficult to read precisely. Minute hands were added to address the precision problem.</p><p>An alternative approach to improving precision with a single hand is to digitally zoom the clock face.</p><h2>The Math</h2><table><thead><tr><th></th><th>Definitions</th></tr></thead><tbody><tr><td>Viewport</td><td>window on circular clock</td></tr><tr><td><code>R</code></td><td>viewport radius</td></tr><tr><td>Clock face</td><td>the numbers and tick markings as a group</td></tr><tr><td><code>tau</code></td><td>angle of hour hand from pole (3 o&#x27;clock)</td></tr></tbody></table><p>Zooming the clock face means choosing a clock face segment to enlarge. The clock face segment has a chord.</p><p>Let <code>alpha</code> be half the clock face segment angle.</p><p>Zooming is done by scaling the chord to be the viewport diameter.</p><p>Let <code>r</code> be half the chord length, then <code>sin(alpha) = r/R</code>. The scaling factor is <code>R/r = 1/sin(alpha)</code>.</p><p>Let <code>d</code> be the distance from viewport center to chord midpoint before scaling, <code>d = R * cos(alpha)</code>.</p><p>The translation offset in x- and y-direction before scaling are</p><ul><li><code>dx = cos(tau) * d = R * cos(tau) * cos(alpha)</code></li><li><code>dy = sin(tau) * d = R * sin(tau) * cos(alpha)</code></li></ul><p>After scaling</p><ul><li><code>dx&#x27; = R * cos(tau) * cos(alpha) / sin(alpha)</code></li><li><code>dy&#x27; = R * sin(tau) * cos(alpha) / sin(alpha)</code></li></ul><p><code>alpha</code> has interval <code>(0, pi/2]</code>. The left bound is open because <code>alpha = 0</code> means infinite zoom which is not useful to display.</p><p>To avoid the infinite zoom problem we introduce a zoom variable <code>z</code> and a function <code>f: [0, inf) -&gt; [pi/2, 0)</code> that approaches 0 asymptotically.</p><p>The most obvious such function is <code>f(z) = 1 / (z + 2/pi)</code>. An additional advantage of asymptotically approaching 0 is course adjustments at low zoom and fine adjustments at high zoom.</p><p><code>[0, inf)</code> is not practical for input because of <code>inf</code> so it is best to close the right bound. Naturally, the output interval right bound should also be closed at an arbitrary value. One such choice is <code>[0, 100] -&gt; [pi/2, pi/6]</code>. The most obvious such function is <code>g(z) = 1 / (k*z + 2/pi)</code> where the reader can find <code>k</code> as an exercise.</p>]]></content>
    </entry>
</feed>