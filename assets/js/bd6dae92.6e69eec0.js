"use strict";(self.webpackChunkfidelcoria=self.webpackChunkfidelcoria||[]).push([[454],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),h=c(n),d=o,m=h["".concat(s,".").concat(d)]||h[d]||p[d]||i;return n?r.createElement(m,a(a({ref:t},u),{},{components:n})):r.createElement(m,a({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5787:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return h}});var r=n(3117),o=n(102),i=(n(7294),n(3905)),a=["components"],l={},s="Toolbox of Software Developer Tricks, etc.",c={type:"mdx",permalink:"/toolbox",source:"@site/src/pages/toolbox.md"},u=[{value:"Ruby Gems: execute specific version from several installed",id:"ruby-gems-execute-specific-version-from-several-installed",children:[],level:2},{value:"Node: get package.json version",id:"node-get-packagejson-version",children:[],level:2},{value:"Git: Step through commits on a branch",id:"git-step-through-commits-on-a-branch",children:[],level:2},{value:"Git SSH for multiple remote servers",id:"git-ssh-for-multiple-remote-servers",children:[],level:2},{value:"macOS: Always show hidden files",id:"macos-always-show-hidden-files",children:[],level:2},{value:"<code>defaults write com.apple.finder AppleShowAllFiles -bool true</code>",id:"defaults-write-comapplefinder-appleshowallfiles--bool-true",children:[],level:2},{value:"Git debug ignore and excludes",id:"git-debug-ignore-and-excludes",children:[],level:2},{value:"K8S: How to print Opaque Secrets",id:"k8s-how-to-print-opaque-secrets",children:[],level:2},{value:"GitHub: Find repos you own in an Organization",id:"github-find-repos-you-own-in-an-organization",children:[],level:2}],p={toc:u};function h(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"toolbox-of-software-developer-tricks-etc"},"Toolbox of Software Developer Tricks, etc."),(0,i.kt)("p",null,"Useful little things are easy to lose"),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"ruby-gems-execute-specific-version-from-several-installed"},"Ruby Gems: execute specific version from several installed"),(0,i.kt)("p",null,"Multiple versions of a Ruby Gem can be installed for use from the command line. For example to see which versions of bundler you have "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"gem list bundler\n")),(0,i.kt)("p",null,"To use the version you want put the version number between underscores right after the gem command line name (note this may be different than the gem name)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"bundle _2.3.4_ install\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"node-get-packagejson-version"},"Node: get package.json version"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ node -p \"require('./package.json').version\"\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"git-step-through-commits-on-a-branch"},"Git: Step through commits on a branch"),(0,i.kt)("p",null,"Walk through commits on a branch by jumping back a number of commits from the branch head."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"git checkout <branch-name>~<number>\ngit checkout spam_and_eggs~5\ngit checkout spam_and_eggs~6\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"git-ssh-for-multiple-remote-servers"},"Git SSH for multiple remote servers"),(0,i.kt)("p",null,"~/.ssh/config:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Host github.com\n  HostName github.com\n  User git\n  IdentityFile ~/.ssh/personal_github\n\nHost github.company.com\n  HostName github.company.com\n  User git\n  IdentityFile ~/.ssh/work_github\n")),(0,i.kt)("p",null,"SOURCE: ",(0,i.kt)("a",{parentName:"p",href:"https://www.freecodecamp.org/news/manage-multiple-github-accounts-the-ssh-way-2dadc30ccaca/"},"https://www.freecodecamp.org/news/manage-multiple-github-accounts-the-ssh-way-2dadc30ccaca/")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"macos-always-show-hidden-files"},"macOS: Always show hidden files"),(0,i.kt)("h2",{id:"defaults-write-comapplefinder-appleshowallfiles--bool-true"},(0,i.kt)("inlineCode",{parentName:"h2"},"defaults write com.apple.finder AppleShowAllFiles -bool true")),(0,i.kt)("h2",{id:"git-debug-ignore-and-excludes"},"Git debug ignore and excludes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"git check-ignore -v <FILE_NAME>\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"k8s-how-to-print-opaque-secrets"},"K8S: How to print Opaque Secrets"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'kubectl get secret <SECRET_NAME> -o jsonpath="{.data.<DATA>}" | base64 --decode\n')),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"github-find-repos-you-own-in-an-organization"},"GitHub: Find repos you own in an Organization"),(0,i.kt)("p",null,"It is impossible on the GitHub website to see a list of repos in an Organization that you own."),(0,i.kt)("p",null,"Here is a GraphQL query (with query variables) that gets you pretty close. You still have to manually filter repos forked from an Organization repo. The ",(0,i.kt)("inlineCode",{parentName:"p"},"login")," values in the response can help select the org you care about. You can run the query on ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/graphql/overview/explorer"},"https://docs.github.com/en/graphql/overview/explorer"),". Don't forget to sign in."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"query pagination($first: Int!, $after: String = null) {\n    viewer {\n        repositories(first: $first, after: $after, affiliations: [ORGANIZATION_MEMBER]) {\n            totalCount\n            nodes {\n                name, url\n                owner { login }\n            }\n            pageInfo {\n                startCursor, endCursor\n                hasPreviousPage, hasNextPage\n            }\n        }\n    }\n}\n")),(0,i.kt)("p",null,"Here is the REST api version:  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'curl \\\n  -H "Accept: application/vnd.github.v3+json" \\\n  -u "$USERNAME:$PERSONAL_ACCESS_TOKEN" \\\n  https://api.github.com/user/repos?affiliation=organization_member&per_page=100&page=1\n')),(0,i.kt)("p",null,"SOURCE: ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/rest/reference/repos#list-repositories-for-the-authenticated-user"},"https://docs.github.com/en/rest/reference/repos#list-repositories-for-the-authenticated-user")))}h.isMDXComponent=!0}}]);