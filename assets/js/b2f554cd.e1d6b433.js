"use strict";(self.webpackChunkfidelcoria=self.webpackChunkfidelcoria||[]).push([[477],{10:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"Useless Machine - LEGO Technic","metadata":{"permalink":"/blog/2021/12/16/Lego_Useless_Machine","editUrl":"https://github.com/alzafacon/alzafacon.github.io/edit/main/website/blog/blog/2021-12-16-Lego_Useless_Machine/index.md","source":"@site/blog/2021-12-16-Lego_Useless_Machine/index.md","title":"Useless Machine - LEGO Technic","description":"The purpose of a Useless Machine is to turn itself off when activated. Kits and built examples are available for purchase. While researching I found LEGO models but without kits or instructions.","date":"2021-12-16T00:00:00.000Z","formattedDate":"December 16, 2021","tags":[],"readingTime":0.605,"truncated":true,"authors":[],"nextItem":{"title":"Custom domain for GitHub Pages","permalink":"/blog/2021/12/06/GitHub_Pages"}},"content":"The purpose of a Useless Machine is to turn itself off when activated. Kits and built examples are available for purchase. While researching I found LEGO models but without kits or instructions.\\n\\nChallenge accepted!\\n\\n\x3c!--truncate--\x3e\\n\\nI completed the model in March of 2017 and revised it today.\\n\\nWithout a parts list or instructions I decided to reverse engineer the device from the following video:\\n[[011] Lego Technic - Useless Machine](https://www.youtube.com/watch?v=HAk-rhvZe2w)\\n\\nI created a model using LEGO Digital Designer (LDD) before buying the parts. [Download the LXF model](./UselessMachine.lxf)\\n\\nUsing LDD I generated a PDF with building instructions and a parts list at the end.\\n[Download the PDF instructions](./UselessMachineInstructions.pdf)\\n\\nHere is the model at the final step of assembly\\n\\n![Final Step from instructions](./Step84.png)"},{"id":"Custom domain for GitHub Pages","metadata":{"permalink":"/blog/2021/12/06/GitHub_Pages","editUrl":"https://github.com/alzafacon/alzafacon.github.io/edit/main/website/blog/blog/2021-12-06-GitHub_Pages.md","source":"@site/blog/2021-12-06-GitHub_Pages.md","title":"Custom domain for GitHub Pages","description":"This website is hosted on GitHub pages. The default domain is alzafacon.github.io since the source code is hosted on a repo of the same name.","date":"2021-12-06T00:00:00.000Z","formattedDate":"December 6, 2021","tags":[],"readingTime":0.485,"truncated":false,"authors":[],"prevItem":{"title":"Useless Machine - LEGO Technic","permalink":"/blog/2021/12/16/Lego_Useless_Machine"},"nextItem":{"title":"DigiLog - The Single Hand Analog Clock with a Digital Enhancement","permalink":"/blog/2021/12/05/DigiLog"}},"content":"This website is hosted on GitHub pages. The default domain is alzafacon.github.io since the source code is hosted on a repo of the same name. \\n\\nI setup a custom domain following the docs: \\nhttps://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/about-custom-domains-and-github-pages\\n\\nHere are some clarifications:\\n\\n- You must enter the desired custom domain in the repo settings page before creating any DNS entries\\n\\n- The DNS configuration should be as follows (I used namecheap.com)\\n\\n```\\nALIAS\\nHost: @\\nTarget: alzafacon.github.io.\\n\\nCNAME\\nHost: www\\nTarget: alzafacon.github.io.\\n```\\n\\nI also setup alzafacon.com to redirect to fidelcoria.com\\n```\\nURL Redirect\\nHost: @\\nDestination URL: https://fidelcoria.com\\nUnmasked\\n```"},{"id":"DigiLog - The Single Hand Analog Clock with a Digital Enhancement","metadata":{"permalink":"/blog/2021/12/05/DigiLog","editUrl":"https://github.com/alzafacon/alzafacon.github.io/edit/main/website/blog/blog/2021-12-05-DigiLog/index.md","source":"@site/blog/2021-12-05-DigiLog/index.md","title":"DigiLog - The Single Hand Analog Clock with a Digital Enhancement","description":"In the past single hand clocks and watches were common, but they were difficult to read precisely. Minute hands were added to address the precision problem.","date":"2021-12-05T00:00:00.000Z","formattedDate":"December 5, 2021","tags":[],"readingTime":1.855,"truncated":true,"authors":[],"prevItem":{"title":"Custom domain for GitHub Pages","permalink":"/blog/2021/12/06/GitHub_Pages"}},"content":"In the past single hand clocks and watches were common, but they were difficult to read precisely. Minute hands were added to address the precision problem.\\n\\nAn alternative approach to improving precision with a single hand is to digitally zoom the clock face.\\n\\n\x3c!--truncate--\x3e\\n\\n## The Math\\n\\n| | Definitions |\\n| - | - |\\n| Viewport   | window on circular clock |\\n| `R`        | viewport radius |\\n| Clock face | the numbers and tick markings as a group |\\n| `tau`      | angle of hour hand from pole (3 o\'clock) |\\n\\nZooming the clock face means choosing a clock face segment to enlarge. The clock face segment has a chord.\\n\\nLet `alpha` be half the clock face segment angle.\\n\\nZooming is done by scaling the chord to be the viewport diameter.\\n\\nLet `r` be half the chord length, then `sin(alpha) = r/R`. The scaling factor is `R/r = 1/sin(alpha)`.\\n\\nLet `d` be the distance from viewport center to chord midpoint before scaling, `d = R * cos(alpha)`.\\n\\nThe translation offset in x- and y-direction before scaling are\\n  - `dx = cos(tau) * d = R * cos(tau) * cos(alpha)`\\n  - `dy = sin(tau) * d = R * sin(tau) * cos(alpha)`\\n\\nAfter scaling\\n  - `dx\' = R * cos(tau) * cos(alpha) / sin(alpha)`\\n  - `dy\' = R * sin(tau) * cos(alpha) / sin(alpha)`\\n\\n`alpha` has interval `(0, pi/2]`. The left bound is open because `alpha = 0` means infinite zoom which is not useful to display.\\n\\nTo avoid the infinite zoom problem we introduce a zoom variable `z` and a function `f: [0, inf) -> [pi/2, 0)` that approaches 0 asymptotically.\\n\\nThe most obvious such function is `f(z) = 1 / (z + 2/pi)`. An additional advantage of asymptotically approaching 0 is course adjustments at low zoom and fine adjustments at high zoom.\\n\\n`[0, inf)` is not practical for input because of `inf` so it is best to close the right bound. Naturally, the output interval right bound should also be closed at an arbitrary value. One such choice is `[0, 100] -> [pi/2, pi/6]`. The most obvious such function is `g(z) = 1 / (k*z + 2/pi)` where the reader can find `k` as an exercise."}]}')}}]);